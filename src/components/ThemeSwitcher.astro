---
// Theme Switcher Component - Switches between Gurren Lagann (light) and Evangelion (dark)
---

<!-- Simple inline theme toggle -->
<button 
  id="theme-toggle" 
  class="theme-toggle-btn relative p-2 rounded-lg transition-all duration-200 hover:bg-surface-100 dark:hover:bg-surface-800 focus:outline-none"
  aria-label="Toggle theme"
  title="Switch theme"
>
  <!-- Light theme icon -->
  <div class="theme-icon light-icon transition-all duration-300">
    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
      <path fill-rule="evenodd" d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" clip-rule="evenodd"></path>
    </svg>
  </div>
  
  <!-- Dark theme icon -->
  <div class="theme-icon dark-icon absolute inset-2 transition-all duration-300">
    <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
      <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
    </svg>
  </div>
</button>

<style>
  /* Light theme icon visible by default */
  .light-icon {
    opacity: 1;
  }
  
  /* Dark theme icon hidden by default */
  .dark-icon {
    opacity: 0;
  }
  
  /* Dark theme active - show dark icon, hide light icon */
  [data-theme="dark"] .light-icon {
    opacity: 0;
  }
  
  [data-theme="dark"] .dark-icon {
    opacity: 1;
  }
</style>

<script>
  // Theme switching functionality
  class ThemeSwitcher {
    constructor() {
      this.init();
    }
    
    init() {
      // Get saved theme from localStorage or default to light
      const savedTheme = localStorage.getItem('theme') || 'light';
      this.setTheme(savedTheme);
      
      // Add event listener to toggle button
      const toggleBtn = document.getElementById('theme-toggle');
      if (toggleBtn) {
        toggleBtn.addEventListener('click', () => this.toggleTheme());
      }
      
      // Update theme name display
      this.updateThemeNameDisplay();
      
      // Listen for system theme changes
      const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
      mediaQuery.addEventListener('change', (e) => {
        if (!localStorage.getItem('theme')) {
          this.setTheme(e.matches ? 'dark' : 'light');
        }
      });
    }
    
    getCurrentTheme() {
      return document.documentElement.getAttribute('data-theme') || 'light';
    }
    
    setTheme(theme) {
      // Update document attribute
      document.documentElement.setAttribute('data-theme', theme);
      
      // Save to localStorage
      localStorage.setItem('theme', theme);
      
      // Update theme name display
      this.updateThemeNameDisplay();
      
      // Trigger custom event for other components
      window.dispatchEvent(new CustomEvent('themechange', { 
        detail: { theme, themeName: this.getThemeName(theme) }
      }));
    }
    
    toggleTheme() {
      const currentTheme = this.getCurrentTheme();
      const newTheme = currentTheme === 'light' ? 'dark' : 'light';
      this.setTheme(newTheme);
      
      // Add a subtle animation effect
      this.animateThemeChange();
    }
    
    getThemeName(theme) {
      return theme === 'light' ? 'Gurren Lagann' : 'Neon Genesis Evangelion';
    }
    
    updateThemeNameDisplay() {
      // Simplified - no status display needed
    }
    
    animateThemeChange() {
      // Add a brief flash effect to indicate theme change
      const toggleBtn = document.getElementById('theme-toggle');
      if (toggleBtn) {
        toggleBtn.style.transform = 'scale(1.1)';
        setTimeout(() => {
          toggleBtn.style.transform = '';
        }, 150);
      }
      
      // Create a subtle ripple effect
      this.createRippleEffect();
    }
    
    createRippleEffect() {
      const ripple = document.createElement('div');
      ripple.className = 'theme-ripple fixed inset-0 pointer-events-none z-40';
      ripple.style.background = `radial-gradient(circle, rgba(var(--color-primary-500), 0.1) 0%, transparent 70%)`;
      ripple.style.transform = 'scale(0)';
      ripple.style.transition = 'transform 0.6s ease-out, opacity 0.6s ease-out';
      ripple.style.opacity = '1';
      
      document.body.appendChild(ripple);
      
      requestAnimationFrame(() => {
        ripple.style.transform = 'scale(3)';
        ripple.style.opacity = '0';
      });
      
      setTimeout(() => {
        document.body.removeChild(ripple);
      }, 600);
    }
  }
  
  // Initialize theme switcher when DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new ThemeSwitcher());
  } else {
    new ThemeSwitcher();
  }
  
  // Export for potential use by other components
  window.ThemeSwitcher = ThemeSwitcher;
</script>